version: 2.1

jobs:
  build_dev:
    docker:
      - image: cimg/base:2021.04

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name: compose build
          command: docker-compose -f ./docker/docker-compose.test.yml build

      - run:
          name: retag image
          command: docker image tag $APP_NAME:dev $IMAGE_NAME:dev

      - run:
          name: registry login
          command: echo $CR_PAT | docker login $REGISTRY -u $CR_USERNAME --password-stdin

      - run:
          name: push to registry
          command: docker push $IMAGE_NAME:dev

  flake8:
    docker:
      - image: cimg/base:2021.04

    steps:
      - checkout

      # - setup_remote_docker:
      #     version: 20.10.14
      #     docker_layer_caching: true

      - run:
          name: pull image
          command: docker pull $IMAGE_NAME:dev

      # - run:
      #     name: compose build
      #     command: docker-compose -f ./docker/docker-compose.test.yml build

      - run:
          name: flake8
          command: docker run --rm --entrypoint="" $APP_NAME:latest "sh" "-c" "flake8 ."

  black:
    docker:
      - image: cimg/base:2021.04

    steps:
      - checkout

      # - setup_remote_docker:
      #     version: 20.10.14
      # docker_layer_caching: true

      - run:
          name: pull image
          command: docker pull $IMAGE_NAME:dev

      # - run:
      #     name: compose build
      #     command: docker-compose -f ./docker/docker-compose.test.yml build

      - run:
          name: black
          command: docker run --rm --entrypoint="" $APP_NAME:latest "sh" "-c" "black ."

  mypy:
    docker:
      - image: cimg/base:2021.04

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          # docker_layer_caching: true

      - run:
          name: pull image
          command: docker pull $IMAGE_NAME:dev

      # - run:
      #     name: compose build
      #     command: docker-compose -f ./docker/docker-compose.test.yml build

      - run:
          name: mypy
          command: docker run --rm --entrypoint="" $APP_NAME:latest "sh" "-c" "mypy --pretty --follow-imports=silent ."

  isort:
    docker:
      - image: cimg/base:2021.04

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name: pull image
          command: docker pull $IMAGE_NAME:dev

      - run:
          name: registry login
          command: echo $CR_PAT | docker login $REGISTRY -u $CR_USERNAME --password-stdin

      # - run:
      #     name: compose build
      #     command: docker-compose -f ./docker/docker-compose.test.yml build

      - run:
          name: isort
          command: docker run --rm --entrypoint="" $APP_NAME:latest "sh" "-c" "isort ."

  build_prod:
    docker:
      - image: cimg/base:2021.04

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name: compose build
          command: docker-compose -f ./docker/docker-compose.test.yml -f ./docker/docker-compose.prod.yml build

      - run:
          name: retag image
          command: docker image tag $APP_NAME:prod $IMAGE_NAME:prod

      - run:
          name: registry login
          command: echo $CR_PAT | docker login $REGISTRY -u $CR_USERNAME --password-stdin

      - run:
          name: push to registry
          command: docker push $IMAGE_NAME

  deploy:
    docker:
      - image: cimg/base:2021.04

    steps:
      - run:
          name: ssh release
          command: |
            ssh -oStrictHostKeyChecking=no -v $HOST_USER@$HOST "
              cd ~/code
              export DB_NAME=$DB_NAME
              export DB_USER=$DB_USER
              export DB_HOST=$DB_HOST
              export DB_PASS=$DB_PASS
              export EMAIL=$EMAIL
              export EPASS=$EPASS
              export POSTGRES_PASSWORD=$POSTGRES_PASSWORD
              echo $CR_PAT | docker login $REGISTRY -u $CR_USERNAME --password-stdin
              docker pull $IMAGE_NAME:prod
              docker-compose -f docker-compose.yml up -d $APP_NAME
              docker image prune
            "

workflows:
  version: 2
  deployment:
    jobs:
      - build_dev

      - flake8:
          requires:
            - build_dev

      - black:
          requires:
            - build_dev

      - mypy:
          requires:
            - build_dev

      - isort:
          requires:
            - build_dev

      - build_prod:
          requires:
            - flake8
            - black
            - mypy
            - isort
          filters:
            branches:
              only:
                - main

      - deploy:
          requires:
            - build_prod
          filters:
            branches:
              only:
                - main
